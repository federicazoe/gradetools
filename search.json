[{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://federicazoe.github.io/gradetools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <https://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <https://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <https://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"obtaining-the-example-directory","dir":"Articles","previous_headings":"","what":"Obtaining the example directory","title":"How to grade with gradetools","text":"example use example directory called example-directory-week09-regression quizzes-collected-week09-regression repository gradetools-test-course organization GitHub. follow along computer can pull repo GitHub use “Download ZIP” option drop list “Code” button GitHub. Everything using example-directory-week09-regression folder. folder contains class-roster.csv, quiz-09a-lin-reg-rubric.csv, folder named quizzes. Quiz folder contains students’ quizzes well template copy quiz.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"preparing-to-grade-with-gradetools","dir":"Articles","previous_headings":"","what":"Preparing to grade with gradetools","title":"How to grade with gradetools","text":"necessary materials grading class roster, assignment rubric assignments graded.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"the-roster","dir":"Articles","previous_headings":"Preparing to grade with gradetools","what":"The roster","title":"How to grade with gradetools","text":"requirement class roster contains column named “student_identifier”. student_identifier must thing unique student student’s assignment path (e.g. student_identifier catalinamedina path assignment “hw1-catalinamedina.R” “homework/catalinamedina/hw1.Rmd”). Typically student identifier student’s name, school id, school id number, GitHub username. columns present class roster present final grade sheet prepared gradetools. class roster use example GitHub usernames student_identifier extra column called Name.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"the-rubric","dir":"Articles","previous_headings":"Preparing to grade with gradetools","what":"The rubric","title":"How to grade with gradetools","text":"rubric assignment graded gradetools specific requirements. function create_rubric_template() creates rubric template grader fill . function requires user specify (1) path want write rubric template (2) whether rubric list possible errors along points removed error (negative_grading = TRUE) expected components correct answer along points added component (negative_grading = FALSE). call .csv file created contain headers. user fill rubric according specifications described documentation create_rubric_template(). filled rubric provided example directory. screenshot , notice rubric includes three types entries column “name”: specific parts assignment (Question 1.Question 3.b), “all_questions” “general_feedback”. Names specific assignment parts can freely specified (e.g. “Question 1.” named “Regression equation”). correspond part assignment grader wants assess don’t need question special demarcation assignment. example, grading research proposal, specific part’s name rubric entry “Abstract”. Specific parts need given “total_points” total score available part “points_to_remove” points removed score assigned part (“points_to_add”, negative_grading = FALSE, case added score instead removed). grader includes entries name “all_questions”, corresponding rubric items available parts assignment except general feedback. useful rubric items like “correct” “missing”, specific part assignment. Points specified “all_questions” items considered percentage total points part (“points_to_remove” = 100 means score assigned part 0). grader includes entries name “general_feedback” available graded assignment’s parts can used provide feedback won’t affect grade. user began grading, question names prompt codes changed. However, moment, grader can modify prompt messages want see grading well total points specific part feedback points associated rubric item. see another example valid rubric one can run create_rubric_template() additional arguments: write example filled-rubric well rubric template specified paths.","code":"create_rubric_template(   rubric_path = \"quiz-09-lin-reg-rubric.csv\",   negative_grading = TRUE ) create_rubric_template(   rubric_path = \"quiz-09-lin-reg-rubric.csv\",   negative_grading = TRUE,    create_example_rubric = TRUE,   example_rubric_path = \"example-rubric.csv\" )"},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"other-assist_grading-arguments","dir":"Articles","previous_headings":"Preparing to grade with gradetools","what":"Other assist_grading() arguments","title":"How to grade with gradetools","text":"gradetools assist_grading() function helps user opening assignments graded, prompting user grade, storing grading information, generating final grade sheet. necessary arguments : rubric_path roster_path grading_progress_log_path final_grade_sheet_path example_student_identifier example_assignment_path example_feedback_path previous sections vignette, already know rubric roster paths. Now need specify save grading progress log final grade sheet. grading progress log file used internally gradetools stores grading progress. Keeping file allows user interrupt resume grading, regrade, change rubric items, add assignments graded, many functionalities. example_student_identifier corresponds identifiers present student_identifier column roster. example_assignment_path path assignment(s) associated example_student_identifier located. example_feedback_path path grader wishes save feedback file associated example_student_identifier. extension path dictates file type. current options extensions “Rmd”, “md”, “docx”, “html”, “pdf”. feedback files knitted accompanying file type (except Rmd files): GitHub, Word, html, pdf documents respectively. practice example clarify arguments introduced . details arguments can found assist_grading() documentation.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"grading-with-assist_grading","dir":"Articles","previous_headings":"","what":"Grading with assist_grading()","title":"How to grade with gradetools","text":"now ready begin grading gradetools. package used RStudio since opens files. begin grading, user call assist_grading() function. function call assumes example-directory-week09-regression working directory. user begins grading assignment first time, message displayed informing user grading progress log begin created, must deleted. Next, user informed student going begin grading previous grading progress. assignments associated student grading session opened grader view grading. grader prompted console grade first ungraded question student. assignment opened cursor moves console new assignment. bring cursor back can type “Ctrl + 2” click console.","code":"assist_grading(   rubric_path = \"quiz-09-lin-reg-rubric.csv\",    roster_path = \"class-roster.csv\",    grading_progress_log_path = \"quiz-09-lin-reg-grading_progress_log.csv\",    final_grade_sheet_path = \"quiz-09-lin-reg-final-grade-sheet.csv\",    example_student_identifier = \"federicazoe\",   example_assignment_path = \"quizzes/quiz-09a-lin-reg-federicazoe.Rmd\",    example_feedback_path = \"quizzes/feedback-quiz-09a-lin-reg-federicazoe.html\" )"},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"grading-federicas-quiz","dir":"Articles","previous_headings":"Grading with assist_grading()","what":"Grading Federica’s quiz","title":"How to grade with gradetools","text":"assignments associated Federica opened user prompted grade first question console. first student, Federica Zoe, amazing student made errors receive perfect score quiz. enter prompt code “0” , specified rubric assignment, prompt code available questions (column name set “all_questions”) marks question correct. prompt code typed user presses enter submit . Proceeding fashion, give Federica full points complete grading assignment, including assigning general feedback Great job quiz! associated prompt code 0 rubric item named “general_feedback”. General feedback written end feedback file. Upon completion grading assignment’s final score printed user prompted grade next student roster.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"grading-catalinas-quiz","dir":"Articles","previous_headings":"Grading with assist_grading()","what":"Grading Catalina’s quiz","title":"How to grade with gradetools","text":"next student, Catalina Medina, also relatively easy grade made mistakes. first question simple question grade, even without tools aid process. Question 1.b instead one better represents gradetools can helpful. Interpretation important statistics, necessarily easy grade. gradetools helps allowing user easily add save new rubric items grade, writing grader’s feedback file student view. Catalina answered question 1.correctly interpretation provided question 1.b fully correct. mention change associated difference x one unit. convey want add new rubric item. new rubric item added entering “r” instead prompt code. Follow prompts provide following information: prompt code: “1c” prompt message: “Didn’t mention difference x” feedback: “expected change response difference explanatory value one unit.” points remove: “1” providing information asked review confirm rubric addition. new rubric item added, grader able apply current student question. additional prompt options (.e. begin letter) actions can performed instead grading. prompt codes used gradetools recognizes question still ungraded, user still prompted grade question . Sometimes grader want write feedback message student, without adding rubric. grader can using “p” prompt code. Catalina’s plot question 2 technically correct, using default axis good practice. Let’s leave comment . Enter prompt code “p” message “want use figures clearly convey information, set informative axis labels instead using default.”. Continue grade, awarding full points remaining questions. Decline provide final feedback providing prompt code “d”.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"grading-mines-quiz","dir":"Articles","previous_headings":"Grading with assist_grading()","what":"Grading Mine’s quiz","title":"How to grade with gradetools","text":"last student, Mine Docugu, struggling student many errors quiz. grading student see situation want assign multiple rubric items single question. Mine’s questions 1.1.b completely incorrect, proceed grade two questions. plot question 2 multiple errors, want assign multiple rubric items mark error. Assign items “1d” “1a” using two dashes separate prompt codes Question 3 another example . Note rubric items need entered order. Question 3.left blank, grading question leave message student. Use prompt code “p” enter message “Answer question resubmit assignment partial credit.”. Next assign “Answer missing” rubric item entering prompt code “404”. Note messages need provided question graded. Multiple messages rubric item items can provided grading question. Question 3.b missing slope value interpretation context. mistakes students might make create two additional rubric items assign Mine.  Now can finish grading Mine’s (mdogucu’s) assignment.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"the-final-grade-sheet","dir":"Articles","previous_headings":"Grading with assist_grading()","what":"The final grade sheet","title":"How to grade with gradetools","text":"students graded message appear telling grader final grade sheet. final grade sheet contain columns present roster, plus two additional columns. One columns final grade student one grade decomposition, number points student earned question. grader decides want change points associated rubric item, can update column “points_to_remove” “points_to_add” corresponding certain prompt code assignment part assignment’s rubric rerun assist_grading() rubric_path specified path updated rubric. Students completely graded get NA score grade sheet.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"feedback-files","dir":"Articles","previous_headings":"Grading with assist_grading()","what":"Feedback files","title":"How to grade with gradetools","text":"gradetools creates feedback file student user grades. file contain feedback messages associated rubric items applied assignment. feedback knitted specified file type grading ended. grader decides want different type feedback file (e.g. word document instead html) user can rerun assist_grading() file extension example_feedback_path changed desired one. console contain message letting user know feedback files able knitted. , save feedback .Rmd file. part feedback html created Mine.","code":""},{"path":[]},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"missing-assignments","dir":"Articles","previous_headings":"Final notes","what":"Missing assignments","title":"How to grade with gradetools","text":"gradetools determines assignment paths replacing instances example_student_identifier example_assignment_path student identifier. assignment found file path, assist_grading() consider student’s assignment missing. final grade assigned students missing assignments whatever missing_assignment_grade specified , NA default.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"selective-grading","dir":"Articles","previous_headings":"Final notes","what":"Selective grading","title":"How to grade with gradetools","text":"functions assist_advanced_grading() andassist_advanced_grading() function similarly assist_grading(), additional arguments allowing increased user control. Two arguments questions_to_grade students_to_grade. can specified vector question names corresponding question names specified names column rubric. students_to_grade questions_to_grade can also set “”, default.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/a-grading-with-gradetools.html","id":"running-code-from-assignments-while-grading","dir":"Articles","previous_headings":"Final notes","what":"Running code from assignments while grading","title":"How to grade with gradetools","text":"assist grading functions automatically open files associated student’s (team’s) submission sometimes grader may want run code submission. grading gradetools R console busy prompting, user directly run code console. run code assignment submissions grading gradetools recommend knitting/compiling document script. Even R script files can compiled.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/b-regrading-with-gradetools.html","id":"regrading-with-assist_regrading","dir":"Articles","previous_headings":"","what":"Regrading with assist_regrading()","title":"How to regrade assignments with gradetools","text":"can many reasons user may want regrade assignment, assist_regrading() allows specification students questions regrade. case want regrade Question 1.Federica Zoe. exact function call assumes example-directory-week09-regression working directory. assignment team assignment user specified students_to_regrade NULL instead provided teams_to_regrade. function call made everything look function assist grading function, except user prompted grade questions_to_regrade students_to_regrade. user initiate regrading stop grading questions_to_regrade regraded, old grading progress retained questions get regraded.","code":"assist_regrading(   rubric_path = \"quiz-09-lin-reg-rubric.csv\",    grading_progress_log_path = \"quiz-09-lin-reg-grading_progress_log.csv\",    final_grade_sheet_path = \"quiz-09-lin-reg-final-grade-sheet.csv\",    questions_to_regrade = \"Question 1.a\",   students_to_regrade = \"federicazoe\" )"},{"path":"https://federicazoe.github.io/gradetools/articles/b-regrading-with-gradetools.html","id":"final-notes","dir":"Articles","previous_headings":"","what":"Final notes","title":"How to regrade assignments with gradetools","text":"Changing rubric considered regrading. grading progress log saves grading progress saving assigned prompt codes question student. point user can edit rubric re run one assist grading functions associated grades feedback get updated. Rewriting feedback prompt messages clarity, changing points associated question rubric item considered updating completely fine. hand, prompt codes question names changed since gradetools stores grading progress.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/c-extended-capability-teams.html","id":"obtaining-the-example-directory","dir":"Articles","previous_headings":"","what":"Obtaining the example directory","title":"Extended gradetools capability: Team Grading","text":"example use example directory called example-team-grading-directory-week09-regression team-grading-week09-regression repository gradetools-test-course GitHub. using everything example-team-grading-directory-week09-regression folder. folder contains class-roster.csv, quiz-09a-lin-reg-rubric.csv, folder named quizzes contains students’ quizzes.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/c-extended-capability-teams.html","id":"preparing-to-grade","dir":"Articles","previous_headings":"","what":"Preparing to grade","title":"Extended gradetools capability: Team Grading","text":"purposes assume rubric already created. Please refer “--grade--gradetools” vignette rubric creation. Note now two quizzes since Catalina Mine worked together quiz 2 share grade assignment.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/c-extended-capability-teams.html","id":"the-roster","dir":"Articles","previous_headings":"Preparing to grade","what":"The roster","title":"Extended gradetools capability: Team Grading","text":"roster also different example-directory-week09-regression. Team grading requires additional column present roster, team_identifier. identifier something shared among students team. team identifier unique enough unintentionally match something else assignment file path. know student_identifier (team_identifier case) must thing unique student (team) assignment file path feedback file path. example bad team_identifier labeling team “” “1”. assist_team_grading() look instance example_student_identifier example_assignment_path replace instance student_identifier (team_identifier) roster. assignment file paths determined. Similarly feedback file paths. “” “1” single characters easily present file paths without intentionally student_identifier (team_identifier).","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/c-extended-capability-teams.html","id":"grading-with-assist_team_grading","dir":"Articles","previous_headings":"","what":"Grading with assist_team_grading()","title":"Extended gradetools capability: Team Grading","text":"team grading gradetools use assist_team_grading(). exact function call assumes example-team-grading-directory-week09-regression working directory. skip process grading shown “--grade--gradetools” vignette. regrading assist_regrading() difference team grading teams_to_regrade must provided students_to_regrade must set NULL.","code":"assist_team_grading(   rubric_path = \"quiz-09-lin-reg-rubric.csv\",    roster_path = \"class-roster.csv\",    grading_progress_log_path = \"quiz-09-lin-reg-grading_progress_log.csv\",    final_grade_sheet_path = \"quiz-09-lin-reg-final-grade-sheet.csv\",    example_team_identifier = \"team1\",   example_assignment_path = \"quizzes/quiz-09a-lin-reg-team1.Rmd\",    example_feedback_path = \"quizzes/feedback-quiz-09a-lin-reg-team1.html\",  )"},{"path":"https://federicazoe.github.io/gradetools/articles/c-extended-capability-teams.html","id":"final-notes","dir":"Articles","previous_headings":"","what":"Final notes","title":"Extended gradetools capability: Team Grading","text":"assist grading function handles teams individual students grading progress log. final grade sheet row per student grading progress log one row per team. internal difference change process grading may confusing user wanted look grading progress log. GitHub compatible functionalities discussed vignette “Extended gradetools capability: Assignments GitHub” also work assist_team_grading(). assist_team_grading() essentially wrapper assist_advanced_grading() specifically team grading.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/d-extended-capability-github.html","id":"cloning-assignments-from-github-with-ghclass","dir":"Articles","previous_headings":"","what":"Cloning assignments from GitHub with ghclass","title":"Extended gradetools capability: Assignments on GitHub","text":"using gradetools functionalities, user needs clone GitHub repos students pushed assignments. can done easily quickly using function local_repo_clone() ghclass package. code shows clone GitHub organization gradetools-test-course repos whose name contains week09-regression-. repos pulled local folder week09-regression created folder students-repos current working directory. message shown confirm repos cloned (bottom-left screenshot) cloned repos appear path specified (bottom-right screenshot).","code":"class_github_name <- \"gradetools-test-course\" repo_template_name <- \"week09-regression-\" repos_local_path <- \"students-repos/week09-regression\"  ghclass::local_repo_clone(   repo = ghclass::org_repos(class_github_name, repo_template_name),   local_path = repos_local_path )"},{"path":"https://federicazoe.github.io/gradetools/articles/d-extended-capability-github.html","id":"taking-note-of-github-issues-with-assist_advanced_grading","dir":"Articles","previous_headings":"","what":"Taking note of GitHub issues with assist_advanced_grading()","title":"Extended gradetools capability: Assignments on GitHub","text":"grading, gradetools can give us option take note GitHub issues like create students’ teams’ GitHub repos. given option, need grade using assist_advanced_grading() input github_issues set TRUE. Noting pushing issues separated across two functions. grading user can make note issues gradetools stores information easily pushed later using push_to_github(). First take note issue grading. function call assumes working directory directory 4 cloned repositories gradetools -test-course organization GitHub: assist_advanced_grading() assist_team_grading() allow creation GitHub issues. functions similar arguments except second uses team identifiers instead just student identifiers. work assist_advanced_grading() assignments “--grade--gradetools” vignette. Run following code begin. Note new prompt code “” taking note GitHub issue grading. Grading objective vignette, assign whichever rubric items like stop grading Mine’s question 3a. Recall “Grading gradetools” vignette wrote message Mine’s feedback question forgot answer. message told Mine question partial credit. assignment submitted GitHub creating issue may immediate way convey information. Use prompt code “” note issue title “Answer question partial credit”, body “question unanswered. may complete question resubmit assignment partial credit.” issue details noted can use “s” stop grading point proceed push issue GitHub.","code":"- quizzes-collected-week09-regression - week09-regression-federicazoe - week09-regression-CatalinaMedina - week09-regression-mdogucu assist_advanced_grading(   rubric_path = \"quizzes-collected-week09-regression/example-directory-week09-regression/quiz-09-lin-reg-rubric.csv\",   roster_path = \"quizzes-collected-week09-regression/example-directory-week09-regression/class-roster.csv\",   grading_progress_log_path  = \"quiz-09-lin-reg-grading_progress_log.csv\",   final_grade_sheet_path = \"quiz-09-lin-reg-final-grade-sheet.csv\",   example_assignment_path = \"week09-regression-CatalinaMedina/quiz-09a-lin-reg-CatalinaMedina.Rmd\",   example_feedback_path = \"week09-regression-CatalinaMedina/quiz-09a-lin-reg-CatalinaMedina-feedback.html\",   example_student_identifier = \"CatalinaMedina\",   github_issues = TRUE )"},{"path":"https://federicazoe.github.io/gradetools/articles/d-extended-capability-github.html","id":"pushing-feedback-files-and-issues-to-github-with-push_to_github","dir":"Articles","previous_headings":"","what":"Pushing feedback files and issues to GitHub with push_to_github()","title":"Extended gradetools capability: Assignments on GitHub","text":"creation feedback files noting GitHub issue details, push_to_github() function allows us push want GitHub. call push_to_github() look like push feedback files: description specified inputs new us: class_github_name name GitHub organization corresponding class; example_github_repo example name student’s (team’s) repository assignment; example_identifier student_identifier (team_identifier) class roster. compatibility GitHub identifiers need student identifiers push_feedback = TRUE asks function push feedback files (function used create issues, see ). push issues additional argument setting push_issues TRUE. two push arguments can set true function call. Running function call push feedback file respective repo, repo found:","code":"push_to_github (   grading_progress_log_path =  \"quiz-09-lin-reg-grading_progress_log.csv\",   class_github_name = \"gradetools-test-course\",   example_github_repo = \"week09-regression-federicazoe\",   example_identifier = \"federicazoe\",   push_feedback = TRUE )"},{"path":"https://federicazoe.github.io/gradetools/articles/d-extended-capability-github.html","id":"credits","dir":"Articles","previous_headings":"","what":"Credits","title":"Extended gradetools capability: Assignments on GitHub","text":"extended functionalities assignments managed using GitHub possible thanks functions ghclass package.","code":""},{"path":[]},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"cloning-project-repos","dir":"Articles","previous_headings":"Preparing the material","what":"Cloning project repos","title":"Comprehensive example of grading with gradetools","text":"vignette uses two GitHub repositories (repos) gradetools-test-course GitHub organization: final-project-team-poisson one team submission. final-project-team-gamma second team submission. repos can cloned running: final project submissions adapted GitHub repository template accompanying “5Ws 1H Term Projects Introductory Data Science Classroom” Çetinkaya-Rundel, Dogucu, Rummerfield (2022).","code":"class_github_name <- \"gradetools-test-course\" repo_template_name <- \"final-project-team\" repos_local_path <- \"final-project-team-repos\"  ghclass::local_repo_clone(   repo = ghclass::org_repos(class_github_name, repo_template_name),   local_path = repos_local_path )"},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"making-the-roster","dir":"Articles","previous_headings":"","what":"Making the roster","title":"Comprehensive example of grading with gradetools","text":"typically, roster downloaded school learning management system saved .csv file whose path provided one assist grading functions. example, going use minimal roster two columns required team grading.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"making-the-rubric","dir":"Articles","previous_headings":"","what":"Making the rubric","title":"Comprehensive example of grading with gradetools","text":"make sure rubric correct formatting, always create using create_rubric_template() fill . like grade three files team: - README.md - proposal.md - presentation.Rmd consider file component final project one rubric item per component begin grading (items can added grading).","code":"create_rubric_template(   rubric_path = \"rubric.csv\" )"},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"working-directory","dir":"Articles","previous_headings":"Making the rubric","what":"Working directory","title":"Comprehensive example of grading with gradetools","text":"cloning repos creating roster rubric, working directory look like following: Note: simplicity, figure include files folders present cloned repos used example.","code":""},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"grading","dir":"Articles","previous_headings":"","what":"Grading","title":"Comprehensive example of grading with gradetools","text":"grading, going use assist_team_grading(). Note example_assignment_path vector case, since want look three files team. run call, files associated first team roster open. reviewing README, see summary needs expanded upon data source cited. rubric item yet second mistake, first enter ‘r’ add new rubric item: following information: new rubric item created, can assign grade feedback team’s README entering prompt codes ‘1a’ ‘3a’ separated double hyphen. Next, move team’s proposal notice template filled . want give team chance complete proposal partial credit. Creating issue can fast way communicate opportunity team. enter ‘’ provide issue title body: noting issue, enter ‘0’ remove 100% points allocated project proposal. Finally, move presentation. consists .Rmd file may want visualize. Even though console already busy rubric prompting, RStudio can click Knit view compiled slides viewer. grading presentation, notice: title specific plot axis don’t match order response exploratory variables relationship visualized plot accounted model Simplistic titles expected common error rubric item already exists . two mistakes instead specific submission, leave personalized feedback messages . Just like noting issues adding new rubric items, can provide many personalized feedback messages desired prior assigning prompt codes typing ‘p’. Note personalized feedback affect assigned grade. wanted, add rubric vague item specific feedback associated order remove points provide personalized feedback (e.g. one removes 0.5 points ‘minor error’). finish grading team gamma assigning rubric item ‘1a’ presentation component. Prior grading next team, can interrupt grading push feedback noted issues team gamma wish.","code":"assist_team_grading(   rubric_path = \"rubric.csv\",   roster_path = \"roster.csv\",   grading_progress_log_path  = \"grading_progress_log.csv\",   final_grade_sheet_path = \"final-grade-sheet.csv\",   example_assignment_path = c(     \"final-project-team-repos/final-project-team-gamma/README.md\",     \"final-project-team-repos/final-project-team-gamma/proposal/proposal.md\",     \"final-project-team-repos/final-project-team-gamma/presentation/presentation.Rmd\"   ) ,   example_feedback_path = \"final-project-team-repos/final-project-team-gamma/feedback.md\",   example_team_identifier = \"gamma\",   github_issues = TRUE )"},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"pushing-feedback-and-creating-issues-on-github","dir":"Articles","previous_headings":"","what":"Pushing feedback and creating issues on GitHub","title":"Comprehensive example of grading with gradetools","text":"finished grading one multiple students, can push feedback file(s) /create issue(s) noted grading using push_to_github() specifying logical arguments push_feedback create_issues. project involves teams, also need set logical argument team_grading TRUE: calling function, asked whether want perform actions assignments fully graded also partially graded assignments. example team gamma’s pushed feedback file: set create_issues TRUE asked wish review confirm issue noted actually creating GitHub. choose , following example confirmation message see: GitHub currently support multiple assignees private repositories free organizations, team members tagged issue body receive notification issue creation:","code":"push_to_github(   grading_progress_log_path = \"grading_progress_log.csv\",   class_github_name = \"gradetools-test-course\",   example_identifier = \"gamma\",   example_github_repo = \"final-project-team-gamma\",   push_feedback = TRUE,   create_issues = TRUE,   team_grading = TRUE )"},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"regrading-a-specified-question-for-a-specified-student","dir":"Articles","previous_headings":"","what":"Regrading a specified question, for a specified student","title":"Comprehensive example of grading with gradetools","text":"gamma team pushed project proposal repo closed issue, want go ahead regrade part final project give partial credit. can assist_regrading()! Note wish regrade team, need set students_to_regrade NULL provide argument teams_to_regrade: can create new rubric item giving partial credit:","code":"assist_regrading(   rubric_path = \"rubric.csv\",   grading_progress_log_path = \"grading_progress_log.csv\",   final_grade_sheet_path = \"final-grade-sheet.csv\",   questions_to_regrade = c(\"Proposal\"),   students_to_regrade = NULL,   teams_to_regrade = c(\"gamma\"),   github_issues = TRUE )"},{"path":"https://federicazoe.github.io/gradetools/articles/e-comprehensive-example.html","id":"credits","dir":"Articles","previous_headings":"","what":"Credits","title":"Comprehensive example of grading with gradetools","text":"extended functionalities assignments managed using GitHub possible thanks functions ghclass package. final project submissions adapted GitHub repository template accompanying “5Ws 1H Term Projects Introductory Data Science Classroom” Çetinkaya-Rundel, Dogucu, Rummerfield (2022).","code":""},{"path":"https://federicazoe.github.io/gradetools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Federica Zoe Ricci. Maintainer, author. Catalina Medina. Author. Mine Dogucu. Author.","code":""},{"path":"https://federicazoe.github.io/gradetools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ricci F, Medina C, Dogucu M (2022). gradetools: Tools Assist Providing Grades Personalized Feedback Students. https://federicazoe.github.io/gradetools/, https://github.com/federicazoe/gradetools/.","code":"@Manual{,   title = {gradetools: Tools to Assist with Providing Grades and Personalized Feedback to Students},   author = {Federica Zoe Ricci and Catalina Medina and Mine Dogucu},   year = {2022},   note = {https://federicazoe.github.io/gradetools/, https://github.com/federicazoe/gradetools/}, }"},{"path":"https://federicazoe.github.io/gradetools/index.html","id":"gradetools-","dir":"","previous_headings":"","what":"Tools to Assist with Providing Grades and Personalized Feedback to Students ","title":"Tools to Assist with Providing Grades and Personalized Feedback to Students ","text":"gradetools created data science instructors mind. Assessing students open-ended assignments (e.g. projects, interpretation questions) can impactful can also arduous comes grading. gradetools supports grading assessments automated feedback possible. gradetools aims two major things: Automate grading workflow feedback. Minimize switching different interfaces (grade book, student’s work, GitHub etc.) functions gradetools allow grader : efficiently grade assignments several formats (e.g. .R, .Rmd, .py, .txt); specify rubric modify dynamically grading; save final grade sheet assigned grades; save personalized feedback file student; grade individual team-based assignments; regrade specified students questions; push feedback create GitHub issues students’ GitHub repos. package tested RStudio GUI.","code":""},{"path":"https://federicazoe.github.io/gradetools/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Tools to Assist with Providing Grades and Personalized Feedback to Students ","text":"Throughout vignettes provide example grading scenarios can use test functions. currently four vignettes available. grade gradetools: beginner users recommend starting vignette. regrade assignments gradetools: vignette shows change previously assigned grades. Extended gradetools Capability: Team Grading: vignette relevant grading assignments team-based. Extended gradetools Capability: Assignments GitHub: vignette relevant assignments GitHub.","code":""},{"path":"https://federicazoe.github.io/gradetools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools to Assist with Providing Grades and Personalized Feedback to Students ","text":"can install development version GitHub. also need install devtools package installed already.","code":"#install.packages devtools::install_github(\"federicazoe/gradetools\")"},{"path":[]},{"path":"https://federicazoe.github.io/gradetools/reference/add_rubric_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Prompts grader to add a rubric item for the current question — add_rubric_item","title":"Prompts grader to add a rubric item for the current question — add_rubric_item","text":"Prompts grader add rubric item current question","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/add_rubric_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prompts grader to add a rubric item for the current question — add_rubric_item","text":"","code":"add_rubric_item(curr_q, rubric_path, rubric_list)"},{"path":"https://federicazoe.github.io/gradetools/reference/add_rubric_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prompts grader to add a rubric item for the current question — add_rubric_item","text":"curr_q string, name question graded grader asked add rubric item. Needs one names column rubric_path string, path assignment rubric. rubric created using function create_rubric_template, filled user. rubric file name column names must changed. rubric_list list whose format corresponds rubric_list, used functions package. produced import_rubric","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/add_rubric_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prompts grader to add a rubric item for the current question — add_rubric_item","text":"rubric list","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assign_grade_write_feedback.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes feedback, and returns grade, grade decomposition, and grading status — assign_grade_write_feedback","title":"Writes feedback, and returns grade, grade decomposition, and grading status — assign_grade_write_feedback","text":"Writes feedback, returns grade, grade decomposition, grading status","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assign_grade_write_feedback.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes feedback, and returns grade, grade decomposition, and grading status — assign_grade_write_feedback","text":"","code":"assign_grade_write_feedback(   grading_progress_log_row,   rubric_list,   rubric_prompts )"},{"path":"https://federicazoe.github.io/gradetools/reference/assign_grade_write_feedback.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes feedback, and returns grade, grade decomposition, and grading status — assign_grade_write_feedback","text":"grading_progress_log_row data frame 1 row; grading_progress_log data frame containing information gradetools internal use. row correspond student needs graded feedback written rubric_list list lists; sub-list corresponds part assignment rubric specifies name part (e.g. \"question_1\"), total points can earned part, rubric etc. Rubric made using 'create_rubric_template()'. rubric_prompts list prompts; One prompt question plus one overall feedback. produced create_rubric_prompts","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assign_grade_write_feedback.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes feedback, and returns grade, grade decomposition, and grading status — assign_grade_write_feedback","text":"list grade number, total grade scored assignment student graded (e.g. 3) grade_decomposition vector shows part assignment contributed overall grade (e.g. c(1, 0, 2)) grading_status string indicating grading_status student","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assist_grading_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assisted grading — assist_grading_functions","title":"Assisted grading — assist_grading_functions","text":"Functions assist grading providing personalized feedback students. assist_grading() requires minimal user input, assist_team_grading() assist_advanced_grading() offer user control allow team grading grading assignments GitHub","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assist_grading_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assisted grading — assist_grading_functions","text":"","code":"assist_grading(   rubric_path,   roster_path,   grading_progress_log_path,   final_grade_sheet_path,   example_assignment_path,   example_feedback_path,   example_student_identifier,   missing_assignment_grade = NA )  assist_team_grading(   rubric_path,   roster_path,   grading_progress_log_path,   final_grade_sheet_path,   example_assignment_path,   example_feedback_path,   example_team_identifier,   missing_assignment_grade = NA,   questions_to_grade = \"all\",   teams_to_grade = \"all\",   github_issues = FALSE )  assist_advanced_grading(   rubric_path,   roster_path,   grading_progress_log_path,   final_grade_sheet_path,   example_assignment_path,   example_feedback_path,   example_student_identifier,   missing_assignment_grade = NA,   questions_to_grade = \"all\",   students_to_grade = \"all\",   github_issues = FALSE )"},{"path":"https://federicazoe.github.io/gradetools/reference/assist_grading_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assisted grading — assist_grading_functions","text":"rubric_path string, path assignment rubric.  rubric created using function create_rubric_template, filled user.  rubric file name column names must changed. roster_path string; file path class roster csv containing column named student_identifier.  team_grading set TRUE class roster also needs contain column named team_identifier grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv final_grade_sheet_path string; path save final grade sheet . Must .csv example_assignment_path string; file path one assignments graded.  file path structure used determine assignments graded located.  student identifier present somewhere file path example_feedback_path string; file path one assignment feedback files generated user grades.  file path structure used determine feedback files stored.  student identifier must present somewhere file name must part file path unique student.  extension feedback file must one following: \"Rmd\", \"md\", \"docx\", \"html\", \"pdf\".  file types (except first) knitted : GitHub, Word, html, pdf documents respectively example_student_identifier string; student identifier (e.g. name, id, id number, GitHub user name) used identify student roster.  needs present somewhere example_assignment_path. student_identifier needs GitHub user name user wishes push issues feedback GitHub later missing_assignment_grade numeric; grade assign student assignment submission example_team_identifier string; Used instead example_student_identifier grading team assignments assist_team_grading().  team identifier (e.g. \"team1\", \"team2\", etc.) used identify team student roster .  needs present somewhere example_assignment_path. questions_to_grade vector strings; names assignment questions grade, \"\" specify questions graded.  questions_to_grade must exactly match ones present rubric teams_to_grade vector strings; team_identifiers corresponding teams grade, \"\" specify assignments graded.  Team grading grade assignment share among multiple students.  teams_to_grade must team_identifiers present roster github_issues logical, whether grader wants given option create issue students' repos (defaults FALSE) students_to_grade vector strings; student_identifiers corresponding students grade, \"\" specify students graded.  students_to_grade must student_identifiers present roster","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assist_regrading.html","id":null,"dir":"Reference","previous_headings":"","what":"Assists with regrading — assist_regrading","title":"Assists with regrading — assist_regrading","text":"Assists regrading, given assist grading function previously used. Deletes previously specified grades, feedback, comments issues regraded question.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/assist_regrading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assists with regrading — assist_regrading","text":"","code":"assist_regrading(   rubric_path,   grading_progress_log_path,   final_grade_sheet_path,   questions_to_regrade,   students_to_regrade,   teams_to_regrade = NULL,   missing_assignment_grade = NA,   github_issues = FALSE )"},{"path":"https://federicazoe.github.io/gradetools/reference/assist_regrading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assists with regrading — assist_regrading","text":"rubric_path string, path assignment rubric.  rubric created using function create_rubric_template, filled user.  rubric file name column names must changed. grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv final_grade_sheet_path string; path save final grade sheet . Must .csv questions_to_regrade vector strings; vector assignment question 'names' regrade. can specified \"\" apply questions. questions_to_grade must exactly match ones present rubric students_to_regrade vector strings; vector student identifiers regrade. can specified \"\" apply student's rubric. students_to_grade must student_identifiers present roster. provided assignment involved team grading teams_to_regrade vector strings; argument team grading (.e. one assignment connected multiple students). team_identifiers corresponding teams grade, \"\" specify assignments graded. teams_to_regrade must team_identifiers present roster missing_assignment_grade numeric; grade assign student assignment submission github_issues logical, whether grader wants given option create issue students' repos (defaults FALSE)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/core_assist_grading.html","id":null,"dir":"Reference","previous_headings":"","what":"Core function that assists with grading, creates feedback and grade book files — core_assist_grading","title":"Core function that assists with grading, creates feedback and grade book files — core_assist_grading","text":"Core function assists grading, creates feedback grade book files","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/core_assist_grading.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Core function that assists with grading, creates feedback and grade book files — core_assist_grading","text":"","code":"core_assist_grading(   rubric_path,   roster_path,   grading_progress_log_path,   final_grade_sheet_path,   example_assignment_path,   example_feedback_path,   example_student_identifier,   missing_assignment_grade = NA,   questions_to_grade = \"all\",   students_to_grade = \"all\",   team_grading = FALSE,   github_issues = FALSE )"},{"path":"https://federicazoe.github.io/gradetools/reference/core_assist_grading.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Core function that assists with grading, creates feedback and grade book files — core_assist_grading","text":"rubric_path string, path assignment rubric.  rubric created using function create_rubric_template, filled user.  rubric file name column names must changed. roster_path string; file path class roster csv containing column named student_identifier.  team_grading set TRUE class roster also needs contain column named team_identifier grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv final_grade_sheet_path string; path save final grade sheet . Must .csv example_assignment_path string; file path one assignments graded.  file path structure used determine assignments graded located.  student identifier present somewhere file path example_feedback_path string; file path one assignment feedback files generated user grades.  file path structure used determine feedback files stored.  student identifier must present somewhere file name must part file path unique student.  extension feedback file must one following: \"Rmd\", \"md\", \"docx\", \"html\", \"pdf\".  file types (except first) knitted : GitHub, Word, html, pdf documents respectively example_student_identifier string; student identifier (e.g. name, id, id number, GitHub user name) used identify student roster.  needs present somewhere example_assignment_path. student_identifier needs GitHub user name user wishes push issues feedback GitHub later missing_assignment_grade numeric; grade assign student assignment submission questions_to_grade vector strings; names assignment questions grade, \"\" specify questions graded.  questions_to_grade must exactly match ones present rubric students_to_grade vector strings; student_identifiers corresponding students grade, \"\" specify students graded.  students_to_grade must student_identifiers present roster team_grading logical, indicates assignment submission associated multiple students (e.g. team projects) github_issues logical, whether grader wants given option create issue students' repos (defaults FALSE)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_final_grade_sheet.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes final grade sheet csv — create_final_grade_sheet","title":"Writes final grade sheet csv — create_final_grade_sheet","text":"Writes final grade sheet csv","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_final_grade_sheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes final grade sheet csv — create_final_grade_sheet","text":"","code":"create_final_grade_sheet(   grading_progress_log,   final_grade_sheet_path,   missing_assignment_grade,   rubric_list,   rubric_prompts,   team_grading )"},{"path":"https://federicazoe.github.io/gradetools/reference/create_final_grade_sheet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes final grade sheet csv — create_final_grade_sheet","text":"grading_progress_log data frame; grading_progress_log data frame containing information gradetools internal use final_grade_sheet_path string; path save final grade sheet . Must .csv missing_assignment_grade numeric; grade assign student assignment submission rubric_list list whose format corresponds rubric_list, used functions package. produced import_rubric rubric_prompts list prompts; One prompt question plus one overall feedback. produced create_rubric_prompts team_grading logical, indicates assignment submission associated multiple students (e.g. team projects)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_grading_progress_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares grading progress log for gradetools internal use — create_grading_progress_log","title":"Prepares grading progress log for gradetools internal use — create_grading_progress_log","text":"Prepares grading progress log gradetools internal use","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_grading_progress_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares grading progress log for gradetools internal use — create_grading_progress_log","text":"","code":"create_grading_progress_log(   grading_progress_log_path,   example_assignment_path,   example_feedback_path,   example_student_identifier,   roster_path,   github_issues,   team_grading )"},{"path":"https://federicazoe.github.io/gradetools/reference/create_grading_progress_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares grading progress log for gradetools internal use — create_grading_progress_log","text":"grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use. path file. Must .csv example_assignment_path string vector strings; file paths assignments graded one student. file path structure used determine assignments graded located. student identifier present somewhere file paths. student identifier assumed part example_assignment_path unique student example_feedback_path string; file path one assignment feedback files generated user grades. file path structure used determine feedback files stored. student identifier must present somewhere file name must part file path unique student. extension feedback file must one following: \".Rmd\", \".docx\", \".html\", \".pdf\" example_student_identifier string; student identifier (e.g. name, id, id number, GitHub user name) used identify student roster. needs present somewhere example_assignment_path. Currently, team_grading set TRUE team_identifier needs present path instead student_identifier. roster_path string; file path class roster csv containing column named student_identifier. team_grading set TRUE class roster also needs contain column named team_identifier github_issues logical, whether grader wants given option create issue students' repos team_grading logical, indicates assignment submission associated multiple students (e.g. team projects)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_grading_progress_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares grading progress log for gradetools internal use — create_grading_progress_log","text":"tibble; columns read roster_path, including student_identifier, two new columns, feedback_path_Rmd, feedback_path_to_be_knitted, assignment_path containing file paths student assignment files student feedback files","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_issues_github.html","id":null,"dir":"Reference","previous_headings":"","what":"Push issues to GitHub — create_issues_github","title":"Push issues to GitHub — create_issues_github","text":"Push issues GitHub","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_issues_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push issues to GitHub — create_issues_github","text":"","code":"create_issues_github(   grading_progress_log_path,   grading_progress_log,   class_github_name,   team_grading = FALSE )"},{"path":"https://federicazoe.github.io/gradetools/reference/create_issues_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push issues to GitHub — create_issues_github","text":"grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv grading_progress_log tibble created assist_advanced_grading(). class_github_name string, GitHub name class. input needed push feedback issues correct class GitHub. team_grading logical, indicates assignment submission associated multiple students (e.g. team projects)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_prompts.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates assignment rubric prompts — create_rubric_prompts","title":"Creates assignment rubric prompts — create_rubric_prompts","text":"Creates assignment rubric prompts","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_prompts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates assignment rubric prompts — create_rubric_prompts","text":"","code":"create_rubric_prompts(rubric_list, github_issues)"},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_prompts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates assignment rubric prompts — create_rubric_prompts","text":"rubric_list list lists. sub-list corresponds part assignment rubric specifies name part (e.g. \"Question 1\"), total points can earned part, rubric etc. github_issues logical, whether grader wants given option create issue students' repos (defaults FALSE)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_prompts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates assignment rubric prompts — create_rubric_prompts","text":"list prompts. One prompt question plus one overall feedback.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates rubric template csv file — create_rubric_template","title":"Creates rubric template csv file — create_rubric_template","text":"Creates rubric template csv file","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates rubric template csv file — create_rubric_template","text":"","code":"create_rubric_template(   rubric_path,   negative_grading = TRUE,   create_example_rubric = FALSE,   example_rubric_path = NULL )"},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates rubric template csv file — create_rubric_template","text":"rubric_path string; path used save rubric template. must csv file. negative_grading Boolean; TRUE indicates assignment use negative grading instead positive. create_example_rubric Boolean; TRUE indicates example rubric also created. example_rubric_path string; path used save example rubric create_example_rubric TRUE. must csv file.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/create_rubric_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates rubric template csv file — create_rubric_template","text":"rubric must specified following way:      column names generated must left .      row rubric contain details one rubric item one question.      Every question graded must least one rubric item associated.     entries 'name' column must 'general_feedback', 'all_questions', name question rubric item specified .     Rubric items 'name' specified 'all_questions' rubric items available assignment questions. total_points value rubric items. points_to_remove points_to_add values taken percentages (e.g. points_to_remove all_questions rubric item specified 25, grader chooses grade rubric option grading 25     Rubric items 'name' specified 'general_feedback' rubric items user prompted completely graded assignment. rubric items points attached, purpose leave general message student grading completed.     rubric prompt codes must begin digit, contain spaces, unique within question.      Rubric prompt messages brief summaries remind user appropriate situation apply rubric item.     user grading see see rubric items question 'all_questions' rubric items. corresponding prompt codes points remove/add prompt message displayed.     'feedback' column contains message printed student's feedback file rubric item selected.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/delete_student_grading_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete feedback and grades for specified students and questions — delete_student_grading_progress","title":"Delete feedback and grades for specified students and questions — delete_student_grading_progress","text":"Delete feedback grades specified students questions","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/delete_student_grading_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete feedback and grades for specified students and questions — delete_student_grading_progress","text":"","code":"delete_student_grading_progress(   grading_progress_log_path,   rubric_path,   identifier,   questions_to_delete,   github_issues )"},{"path":"https://federicazoe.github.io/gradetools/reference/delete_student_grading_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete feedback and grades for specified students and questions — delete_student_grading_progress","text":"grading_progress_log_path string; path grading progress log produced assign_grade rubric_path string; path assignment rubric. identifier string; single student_identifier (team_identifier) grading progress deleted. questions_to_delete string; vector assignment question 'names' grade feedback deleted.  can specified \"\" apply questions. github_issues logical, whether grader wants given option create issue students' repos (defaults FALSE)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/grade_student.html","id":null,"dir":"Reference","previous_headings":"","what":"Leads grader through grading a student — grade_student","title":"Leads grader through grading a student — grade_student","text":"Leads grader grading student","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/grade_student.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Leads grader through grading a student — grade_student","text":"","code":"grade_student(   row,   grading_progress_log,   grading_progress_log_path,   rubric_prompts,   rubric_list,   rubric_path,   github_issues,   questions_to_grade )"},{"path":"https://federicazoe.github.io/gradetools/reference/grade_student.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Leads grader through grading a student — grade_student","text":"row integer; number indicates row grading_progress_log used / graded grading_progress_log data frame; grading_progress_log data frame containing information gradetools internal use grading_progress_log_path string; path grading_progress_log rubric_prompts list prompts; One prompt question plus one overall feedback. produced create_rubric_prompts rubric_list list whose format corresponds rubric_list, used functions package. produced import_rubric rubric_path string, path assignment rubric. rubric created using function create_rubric_template, filled user. rubric file name column names must changed. github_issues Boolean; indicates grader wants able create GitHub issues questions_to_grade vector strings; names assignment questions grade, \"\" specify questions graded. questions_to_grade must exactly match ones present rubric","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/grade_student.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Leads grader through grading a student — grade_student","text":"grading progress log data frame","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/import_rubric.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads in assignment rubric to produce rubric_list. Alternative to defining rubric as rubric_list manually — import_rubric","title":"Reads in assignment rubric to produce rubric_list. Alternative to defining rubric as rubric_list manually — import_rubric","text":"Reads assignment rubric produce rubric_list. Alternative defining rubric rubric_list manually","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/import_rubric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads in assignment rubric to produce rubric_list. Alternative to defining rubric as rubric_list manually — import_rubric","text":"","code":"import_rubric(rubric_path)"},{"path":"https://federicazoe.github.io/gradetools/reference/import_rubric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads in assignment rubric to produce rubric_list. Alternative to defining rubric as rubric_list manually — import_rubric","text":"rubric_path string, path assignment rubric. rubric created using function create_rubric_template, filled user. rubric file name column names must changed.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/import_rubric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads in assignment rubric to produce rubric_list. Alternative to defining rubric as rubric_list manually — import_rubric","text":"list whose format corresponds rubric_list, used functions package","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/note_github_issues.html","id":null,"dir":"Reference","previous_headings":"","what":"Collects GitHub issue title and body — note_github_issues","title":"Collects GitHub issue title and body — note_github_issues","text":"Collects GitHub issue title body","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/note_github_issues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collects GitHub issue title and body — note_github_issues","text":"","code":"note_github_issues(curr_row, curr_q)"},{"path":"https://federicazoe.github.io/gradetools/reference/note_github_issues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collects GitHub issue title and body — note_github_issues","text":"curr_row row extracted grading_progress_log data table within assist_grading(). curr_q name current question","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/note_github_issues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collects GitHub issue title and body — note_github_issues","text":"corresponding row grading progress log","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/push_feedback_github.html","id":null,"dir":"Reference","previous_headings":"","what":"Push feedback to GitHub — push_feedback_github","title":"Push feedback to GitHub — push_feedback_github","text":"Push feedback GitHub","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/push_feedback_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push feedback to GitHub — push_feedback_github","text":"","code":"push_feedback_github(   grading_progress_log_path,   grading_progress_log,   class_github_name )"},{"path":"https://federicazoe.github.io/gradetools/reference/push_feedback_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push feedback to GitHub — push_feedback_github","text":"grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv grading_progress_log tibble created assist_advanced_grading(). class_github_name string, GitHub name class. input needed push feedback issues correct class GitHub.","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/push_to_github.html","id":null,"dir":"Reference","previous_headings":"","what":"Push feedback and issues to GitHub — push_to_github","title":"Push feedback and issues to GitHub — push_to_github","text":"Push feedback issues GitHub","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/push_to_github.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push feedback and issues to GitHub — push_to_github","text":"","code":"push_to_github(   grading_progress_log_path,   class_github_name,   example_github_repo,   example_identifier,   push_feedback = FALSE,   create_issues = FALSE,   team_grading = FALSE )"},{"path":"https://federicazoe.github.io/gradetools/reference/push_to_github.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push feedback and issues to GitHub — push_to_github","text":"grading_progress_log_path string; assist-grading() functions save file includes information gradetools's internal use.  path file. Must .csv class_github_name string, GitHub name class. input needed github_issues set TRUE. example_github_repo string; example name student's GitHub repo assignment (team's repo, team_grading = TRUE). example_identifier must feature example_github_repo must roster identifier student (team team_grading = TRUE). example_identifier string; GitHub username student name team, team_grading = TRUE. needs present somewhere example_github_repo. push_feedback logical, whether push feedback files create_issues logical, whether create issues team_grading logical, indicates assignment submission associated multiple students (e.g. team projects)","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/remove_associated_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function for deleting info — remove_associated_info","title":"Helper function for deleting info — remove_associated_info","text":"Helper function deleting info","code":""},{"path":"https://federicazoe.github.io/gradetools/reference/remove_associated_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function for deleting info — remove_associated_info","text":"","code":"remove_associated_info(curr_row, questions_to_delete, question_col, info_cols)"},{"path":"https://federicazoe.github.io/gradetools/reference/remove_associated_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function for deleting info — remove_associated_info","text":"curr_row string; row grading progress log change questions_to_delete string; vector assignment question 'names' grade feedback deleted. question_col string; name column containing question names associated info info_cols vector strings; names columns containing info deleted","code":""},{"path":[]},{"path":"https://federicazoe.github.io/gradetools/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"gradetools 0.2.0","text":"Added ability leave personalized feedback message student’s feedback file without grade associated prompt codes starting digits user made letter prompt options options provided gradetools (e.g. adding rubric items, noting issues, providing personalized feedback) Rmd md (GitHub documents) docx (Word documents) html pdf Moved questions_to_grade argument students_to_grade assist_team_grading(), assist_advanced_grading(). Moved questions_to_regrade argument students_to_regrade assist_grading() temporary grade sheet now called grading progress log Can push feedback create GitHub issues partially graded assignments General feedback automatically regraded regrading assignment components","code":""}]
